// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vxhLNdYPiZkVHCUwHukgLS
// Component: HEzhWpoasdTp
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CtaButtonHomePage from "../../CtaButtonHomePage"; // plasmic-import: v_1uoljXHS/component

import { useScreenVariants as useScreenVariantsbsAoCHpNAwrkE } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: BSAoCHpNAwrkE/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_lincd_home.module.css"; // plasmic-import: vxhLNdYPiZkVHCUwHukgLS/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: HEzhWpoasdTp/css

import discordLogoFDt5FOWtj from "./images/discordLogo.png"; // plasmic-import: fDT5fOWtj/picture

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  lincdLandingPage?: p.Flex<"div">;
  home?: p.Flex<"div">;
  hero?: p.Flex<"div">;
  frame140?: p.Flex<"div">;
  frame96?: p.Flex<"div">;
  heading?: p.Flex<"div">;
  title?: p.Flex<"div">;
  description2?: p.Flex<"div">;
  frame179?: p.Flex<"div">;
  lincd?: p.Flex<"div">;
  frame137?: p.Flex<"div">;
  lincdCodeExample?: p.Flex<"div">;
  sectionTitle3?: p.Flex<"div">;
  span?: p.Flex<"span">;
  theLibrary?: p.Flex<"div">;
  frame126?: p.Flex<"div">;
  frame169?: p.Flex<"div">;
  sectionTitle2?: p.Flex<"div">;
  rectangle79?: p.Flex<"div">;
  sectionDescription2?: p.Flex<"div">;
  frame170?: p.Flex<"div">;
  sectionDescription5?: p.Flex<"div">;
  sectionDescription6?: p.Flex<"div">;
  frame171?: p.Flex<"div">;
  sectionDescription3?: p.Flex<"div">;
  sectionDescription4?: p.Flex<"div">;
  frame172?: p.Flex<"div">;
  sectionDescription7?: p.Flex<"div">;
  sectionDescription8?: p.Flex<"div">;
  frame173?: p.Flex<"div">;
  sectionDescription9?: p.Flex<"div">;
  sectionDescription10?: p.Flex<"div">;
  frame174?: p.Flex<"div">;
  sectionDescription11?: p.Flex<"div">;
  sectionDescription12?: p.Flex<"div">;
  frame175?: p.Flex<"div">;
  sectionDescription13?: p.Flex<"div">;
  sectionDescription14?: p.Flex<"div">;
  frame151?: p.Flex<"div">;
  frame153?: p.Flex<"div">;
  rectangle78?: p.Flex<"div">;
  frame149?: p.Flex<"div">;
  frame147?: p.Flex<"div">;
  tag?: p.Flex<"div">;
  largeTagBase?: p.Flex<"div">;
  tag2?: p.Flex<"div">;
  largeTagBase2?: p.Flex<"div">;
  tag3?: p.Flex<"div">;
  largeTagBase3?: p.Flex<"div">;
  frame152?: p.Flex<"div">;
  rectangle80?: p.Flex<"div">;
  frame154?: p.Flex<"div">;
  frame148?: p.Flex<"div">;
  tag4?: p.Flex<"div">;
  largeTagBase4?: p.Flex<"div">;
  tag5?: p.Flex<"div">;
  largeTagBase5?: p.Flex<"div">;
  tag6?: p.Flex<"div">;
  largeTagBase6?: p.Flex<"div">;
  frame155?: p.Flex<"div">;
  rectangle81?: p.Flex<"div">;
  publish?: p.Flex<"div">;
  frame156?: p.Flex<"div">;
  tag7?: p.Flex<"div">;
  largeTagBase7?: p.Flex<"div">;
  tag8?: p.Flex<"div">;
  largeTagBase8?: p.Flex<"div">;
  tag9?: p.Flex<"div">;
  largeTagBase9?: p.Flex<"div">;
  frame157?: p.Flex<"div">;
  rectangle82?: p.Flex<"div">;
  infographic?: p.Flex<"div">;
  collaboration?: p.Flex<"div">;
  frame97?: p.Flex<"div">;
  sectionTitle4?: p.Flex<"div">;
  sectionDescription15?: p.Flex<"div">;
  learnWeb4?: p.Flex<"div">;
  image52?: p.Flex<"div">;
  learnWeb30?: p.Flex<"div">;
  sectionTitle5?: p.Flex<"h2">;
  sectionDescription16?: p.Flex<"div">;
  learnWeb5?: p.Flex<"div">;
  image22?: p.Flex<"div">;
  featureInfo?: p.Flex<"div">;
  sectionTitle6?: p.Flex<"h2">;
  sectionDescription17?: p.Flex<"div">;
  learnWeb6?: p.Flex<"div">;
  image53?: p.Flex<"div">;
  frame131?: p.Flex<"div">;
  sectionTitle7?: p.Flex<"div">;
  sectionDescription18?: p.Flex<"div">;
  footer?: p.Flex<"div">;
  frame145?: p.Flex<"div">;
  sectionTitle8?: p.Flex<"div">;
  semantuIcon?: p.Flex<"div">;
  sectionTitle10?: p.Flex<"div">;
  sectionDescription19?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultHomepageProps {
  className?: string;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbsAoCHpNAwrkE()
  });

  return (
    <React.Fragment>
      {}
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"lincdLandingPage"}
          data-plasmic-override={overrides.lincdLandingPage}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.lincdLandingPage
          )}
        >
          <div
            data-plasmic-name={"home"}
            data-plasmic-override={overrides.home}
            className={classNames(projectcss.all, sty.home)}
          >
            <div
              data-plasmic-name={"hero"}
              data-plasmic-override={overrides.hero}
              className={classNames(projectcss.all, sty.hero)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame140"}
                data-plasmic-override={overrides.frame140}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame140)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0Eqia
                  )}
                >
                  {"LINCD"}
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame96"}
                data-plasmic-override={overrides.frame96}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame96)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"heading"}
                  data-plasmic-override={overrides.heading}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.heading)}
                >
                  <div
                    data-plasmic-name={"title"}
                    data-plasmic-override={overrides.title}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.title
                    )}
                  >
                    {"A New Era of Interoperability"}
                  </div>

                  <div
                    data-plasmic-name={"description2"}
                    data-plasmic-override={overrides.description2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.description2
                    )}
                  >
                    {
                      "Employ the best data practices, speed up your development, and align with Web 3.0"
                    }
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame179"}
                  data-plasmic-override={overrides.frame179}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame179)}
                >
                  <CtaButtonHomePage
                    className={classNames(
                      "__wab_instance",
                      sty.ctaButtonHomePage__gtcgI
                    )}
                  />
                </p.Stack>
              </p.Stack>
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"lincd"}
              data-plasmic-override={overrides.lincd}
              hasGap={true}
              className={classNames(projectcss.all, sty.lincd)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame137"}
                data-plasmic-override={overrides.frame137}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame137)}
              >
                <div
                  data-plasmic-name={"lincdCodeExample"}
                  data-plasmic-override={overrides.lincdCodeExample}
                  alt={"Coding excerpt from LINCD.js protocol" as const}
                  className={classNames(projectcss.all, sty.lincdCodeExample)}
                />

                <div
                  data-plasmic-name={"sectionTitle3"}
                  data-plasmic-override={overrides.sectionTitle3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.sectionTitle3
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      <React.Fragment>{"LINCD\n"}</React.Fragment>
                      <span
                        data-plasmic-name={"span"}
                        data-plasmic-override={overrides.span}
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.span
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "(pronounced linked)"
                          : "(pronounced linked)"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      <React.Fragment>{"LINCD "}</React.Fragment>
                      <span
                        data-plasmic-name={"span"}
                        data-plasmic-override={overrides.span}
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.span
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "(pronounced linked)"
                          : "(pronounced linked)"}
                      </span>
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  )}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mJ
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{""}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"L"}
                    </span>
                    <React.Fragment>{"inked "}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"In"}
                    </span>
                    <React.Fragment>{"teroperable "}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"C"}
                    </span>
                    <React.Fragment>{"ode & "}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"D"}
                    </span>
                    <React.Fragment>{"ata. "}</React.Fragment>
                  </React.Fragment>
                </div>
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"theLibrary"}
              data-plasmic-override={overrides.theLibrary}
              hasGap={true}
              className={classNames(projectcss.all, sty.theLibrary)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame126"}
                data-plasmic-override={overrides.frame126}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame126)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame169"}
                  data-plasmic-override={overrides.frame169}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame169)}
                >
                  <div
                    data-plasmic-name={"sectionTitle2"}
                    data-plasmic-override={overrides.sectionTitle2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.sectionTitle2
                    )}
                  >
                    {"The Library"}
                  </div>

                  <div
                    data-plasmic-name={"rectangle79"}
                    data-plasmic-override={overrides.rectangle79}
                    className={classNames(projectcss.all, sty.rectangle79)}
                  />
                </p.Stack>

                <div
                  data-plasmic-name={"sectionDescription2"}
                  data-plasmic-override={overrides.sectionDescription2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.sectionDescription2
                  )}
                >
                  {
                    "LINCD is a lightweight Javascript library that helps you integrate data from different sources and build visualizations with ease. \nCreate and share code modules across different environments using W3C’s Linked Data standards."
                  }
                </div>

                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__tVSrN)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame170"}
                      data-plasmic-override={overrides.frame170}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame170)}
                    >
                      <div
                        data-plasmic-name={"sectionDescription5"}
                        data-plasmic-override={overrides.sectionDescription5}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.sectionDescription5
                        )}
                      >
                        {"Connect "}
                      </div>

                      <div
                        data-plasmic-name={"sectionDescription6"}
                        data-plasmic-override={overrides.sectionDescription6}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.sectionDescription6
                        )}
                      >
                        {"Databases and API’s as data sources"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame171"}
                      data-plasmic-override={overrides.frame171}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame171)}
                    >
                      <div
                        data-plasmic-name={"sectionDescription3"}
                        data-plasmic-override={overrides.sectionDescription3}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.sectionDescription3
                        )}
                      >
                        {"Convert"}
                      </div>

                      <div
                        data-plasmic-name={"sectionDescription4"}
                        data-plasmic-override={overrides.sectionDescription4}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.sectionDescription4
                        )}
                      >
                        {"Import & convert your data to Linked Data"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame172"}
                      data-plasmic-override={overrides.frame172}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame172)}
                    >
                      <div
                        data-plasmic-name={"sectionDescription7"}
                        data-plasmic-override={overrides.sectionDescription7}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.sectionDescription7
                        )}
                      >
                        {"One graph"}
                      </div>

                      <div
                        data-plasmic-name={"sectionDescription8"}
                        data-plasmic-override={overrides.sectionDescription8}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.sectionDescription8
                        )}
                      >
                        {
                          "In memory graph database with accessible resource-centric API "
                        }
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame173"}
                      data-plasmic-override={overrides.frame173}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame173)}
                    >
                      <div
                        data-plasmic-name={"sectionDescription9"}
                        data-plasmic-override={overrides.sectionDescription9}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.sectionDescription9
                        )}
                      >
                        {"Apply"}
                      </div>

                      <div
                        data-plasmic-name={"sectionDescription10"}
                        data-plasmic-override={overrides.sectionDescription10}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.sectionDescription10
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "tablet")
                          ? "Matching UI components and algorithms with ease"
                          : "Matching UI components and algorithms with ease"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame174"}
                      data-plasmic-override={overrides.frame174}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame174)}
                    >
                      <div
                        data-plasmic-name={"sectionDescription11"}
                        data-plasmic-override={overrides.sectionDescription11}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.sectionDescription11
                        )}
                      >
                        {"Update"}
                      </div>

                      <div
                        data-plasmic-name={"sectionDescription12"}
                        data-plasmic-override={overrides.sectionDescription12}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.sectionDescription12
                        )}
                      >
                        {
                          "When the graph changes, your components will automatically update "
                        }
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame175"}
                      data-plasmic-override={overrides.frame175}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame175)}
                    >
                      <div
                        data-plasmic-name={"sectionDescription13"}
                        data-plasmic-override={overrides.sectionDescription13}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.sectionDescription13
                        )}
                      >
                        {"Publish"}
                      </div>

                      <div
                        data-plasmic-name={"sectionDescription14"}
                        data-plasmic-override={overrides.sectionDescription14}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.sectionDescription14
                        )}
                      >
                        {
                          "Your UI Components, Methods & Algorithms to the LINCD repository"
                        }
                      </div>
                    </p.Stack>
                  </p.Stack>
                ) : null}

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame151"}
                  data-plasmic-override={overrides.frame151}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame151)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? true
                      : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame153"}
                      data-plasmic-override={overrides.frame153}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame153)}
                    >
                      <div
                        data-plasmic-name={"rectangle78"}
                        data-plasmic-override={overrides.rectangle78}
                        className={classNames(projectcss.all, sty.rectangle78)}
                      />
                    </p.Stack>
                  ) : null}

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame149"}
                    data-plasmic-override={overrides.frame149}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame149)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zlxhf
                      )}
                    >
                      {"BUILT WITH"}
                    </div>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame147"}
                      data-plasmic-override={overrides.frame147}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame147)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"tag"}
                        data-plasmic-override={overrides.tag}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.tag)}
                      >
                        <div
                          data-plasmic-name={"largeTagBase"}
                          data-plasmic-override={overrides.largeTagBase}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.largeTagBase
                          )}
                        >
                          {"Typescript"}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"tag2"}
                        data-plasmic-override={overrides.tag2}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.tag2)}
                      >
                        <div
                          data-plasmic-name={"largeTagBase2"}
                          data-plasmic-override={overrides.largeTagBase2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.largeTagBase2
                          )}
                        >
                          {"React"}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"tag3"}
                        data-plasmic-override={overrides.tag3}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.tag3)}
                      >
                        <div
                          data-plasmic-name={"largeTagBase3"}
                          data-plasmic-override={overrides.largeTagBase3}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.largeTagBase3
                          )}
                        >
                          {"ES6"}
                        </div>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame152"}
                    data-plasmic-override={overrides.frame152}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame152)}
                  >
                    <div
                      data-plasmic-name={"rectangle80"}
                      data-plasmic-override={overrides.rectangle80}
                      className={classNames(projectcss.all, sty.rectangle80)}
                    />
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame154"}
                    data-plasmic-override={overrides.frame154}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame154)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__h5Am2
                      )}
                    >
                      {"QUERY LANGUAGES"}
                    </div>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame148"}
                      data-plasmic-override={overrides.frame148}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame148)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"tag4"}
                        data-plasmic-override={overrides.tag4}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.tag4)}
                      >
                        <div
                          data-plasmic-name={"largeTagBase4"}
                          data-plasmic-override={overrides.largeTagBase4}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.largeTagBase4
                          )}
                        >
                          {"GraphQL"}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"tag5"}
                        data-plasmic-override={overrides.tag5}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.tag5)}
                      >
                        <div
                          data-plasmic-name={"largeTagBase5"}
                          data-plasmic-override={overrides.largeTagBase5}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.largeTagBase5
                          )}
                        >
                          {"SPARQL"}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"tag6"}
                        data-plasmic-override={overrides.tag6}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.tag6)}
                      >
                        <div
                          data-plasmic-name={"largeTagBase6"}
                          data-plasmic-override={overrides.largeTagBase6}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.largeTagBase6
                          )}
                        >
                          {"MySQL"}
                        </div>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame155"}
                    data-plasmic-override={overrides.frame155}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame155)}
                  >
                    <div
                      data-plasmic-name={"rectangle81"}
                      data-plasmic-override={overrides.rectangle81}
                      className={classNames(projectcss.all, sty.rectangle81)}
                    />
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"publish"}
                    data-plasmic-override={overrides.publish}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.publish)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ycM4N
                      )}
                    >
                      {"Data ForMATS"}
                    </div>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame156"}
                      data-plasmic-override={overrides.frame156}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame156)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"tag7"}
                        data-plasmic-override={overrides.tag7}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.tag7)}
                      >
                        <div
                          data-plasmic-name={"largeTagBase7"}
                          data-plasmic-override={overrides.largeTagBase7}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.largeTagBase7
                          )}
                        >
                          {"JSON-LD"}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"tag8"}
                        data-plasmic-override={overrides.tag8}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.tag8)}
                      >
                        <div
                          data-plasmic-name={"largeTagBase8"}
                          data-plasmic-override={overrides.largeTagBase8}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.largeTagBase8
                          )}
                        >
                          {"CSV"}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"tag9"}
                        data-plasmic-override={overrides.tag9}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.tag9)}
                      >
                        <div
                          data-plasmic-name={"largeTagBase9"}
                          data-plasmic-override={overrides.largeTagBase9}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.largeTagBase9
                          )}
                        >
                          {"N-Quads"}
                        </div>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>

                  {(
                    hasVariant(globalVariants, "screen", "tablet") ? true : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame157"}
                      data-plasmic-override={overrides.frame157}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame157)}
                    >
                      <div
                        data-plasmic-name={"rectangle82"}
                        data-plasmic-override={overrides.rectangle82}
                        className={classNames(projectcss.all, sty.rectangle82)}
                      />
                    </p.Stack>
                  ) : null}
                </p.Stack>

                <div
                  data-plasmic-name={"infographic"}
                  data-plasmic-override={overrides.infographic}
                  alt={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("LINCD library infographic Vertical aligned" as const)
                      : ("LINCD library infographic" as const)
                  }
                  className={classNames(projectcss.all, sty.infographic)}
                />

                <CtaButtonHomePage
                  className={classNames(
                    "__wab_instance",
                    sty.ctaButtonHomePage__dFyHj
                  )}
                />
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"collaboration"}
              data-plasmic-override={overrides.collaboration}
              hasGap={true}
              className={classNames(projectcss.all, sty.collaboration)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame97"}
                data-plasmic-override={overrides.frame97}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame97)}
              >
                <div
                  data-plasmic-name={"sectionTitle4"}
                  data-plasmic-override={overrides.sectionTitle4}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.sectionTitle4
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Reimagining what it means to collaborate"
                    : "Reimagining what it means to collaborate"}
                </div>

                <div
                  data-plasmic-name={"sectionDescription15"}
                  data-plasmic-override={overrides.sectionDescription15}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.sectionDescription15
                  )}
                >
                  {
                    "Built on W3C Linked Data standards, LINCD not only enables seamless collaboration, but also ensures machine-readable data structures for ML and AI."
                  }
                </div>
              </p.Stack>
            </p.Stack>

            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__nvU9C)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"learnWeb4"}
                  data-plasmic-override={overrides.learnWeb4}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.learnWeb4)}
                >
                  <div
                    data-plasmic-name={"image52"}
                    data-plasmic-override={overrides.image52}
                    alt={"LINCD academy community call" as const}
                    className={classNames(projectcss.all, sty.image52)}
                  />

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"learnWeb30"}
                    data-plasmic-override={overrides.learnWeb30}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.learnWeb30)}
                  >
                    <h2
                      data-plasmic-name={"sectionTitle5"}
                      data-plasmic-override={overrides.sectionTitle5}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.sectionTitle5
                      )}
                    >
                      {"Learn more about Web 3.0"}
                    </h2>

                    <div
                      data-plasmic-name={"sectionDescription16"}
                      data-plasmic-override={overrides.sectionDescription16}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.sectionDescription16
                      )}
                    >
                      {
                        "Join our academy and attend bi-monthly courses covering topics around LINCD web, Web 3.0, and Linked Data."
                      }
                    </div>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"learnWeb5"}
                  data-plasmic-override={overrides.learnWeb5}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.learnWeb5)}
                >
                  <div
                    data-plasmic-name={"image22"}
                    data-plasmic-override={overrides.image22}
                    alt={"Graph of LINCD community members" as const}
                    className={classNames(projectcss.all, sty.image22)}
                  />

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"featureInfo"}
                    data-plasmic-override={overrides.featureInfo}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.featureInfo)}
                  >
                    <h2
                      data-plasmic-name={"sectionTitle6"}
                      data-plasmic-override={overrides.sectionTitle6}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.sectionTitle6
                      )}
                    >
                      {"Engage with LINCD developers"}
                    </h2>

                    <div
                      data-plasmic-name={"sectionDescription17"}
                      data-plasmic-override={overrides.sectionDescription17}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.sectionDescription17
                      )}
                    >
                      {
                        "You can join our community of data scientists, knowledge experts, and developers who are dedicated to making application building better for everyone."
                      }
                    </div>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"learnWeb6"}
                  data-plasmic-override={overrides.learnWeb6}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.learnWeb6)}
                >
                  <div
                    data-plasmic-name={"image53"}
                    data-plasmic-override={overrides.image53}
                    alt={"LINCD academy community call" as const}
                    className={classNames(projectcss.all, sty.image53)}
                  />

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame131"}
                    data-plasmic-override={overrides.frame131}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame131)}
                  >
                    <div
                      data-plasmic-name={"sectionTitle7"}
                      data-plasmic-override={overrides.sectionTitle7}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.sectionTitle7
                      )}
                    >
                      {"Build & Earn"}
                    </div>

                    <div
                      data-plasmic-name={"sectionDescription18"}
                      data-plasmic-override={overrides.sectionDescription18}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.sectionDescription18
                      )}
                    >
                      {
                        "We are looking for developers who demonstrate leadership, clean code, and creativity. Get access to the bounty pool and solve complex real world problems. "
                      }
                    </div>
                  </p.Stack>
                </p.Stack>

                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__it6Uc)}
                  >
                    <CtaButtonHomePage
                      className={classNames(
                        "__wab_instance",
                        sty.ctaButtonHomePage__hxKz4
                      )}
                    />
                  </div>
                ) : null}
              </p.Stack>
            ) : null}

            <p.Stack
              as={"div"}
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              hasGap={true}
              className={classNames(projectcss.all, sty.footer)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame145"}
                data-plasmic-override={overrides.frame145}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame145)}
              >
                <div
                  data-plasmic-name={"sectionTitle8"}
                  data-plasmic-override={overrides.sectionTitle8}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.sectionTitle8
                  )}
                >
                  {"Built by"}
                </div>

                <div
                  data-plasmic-name={"semantuIcon"}
                  data-plasmic-override={overrides.semantuIcon}
                  alt={"Semantu icon" as const}
                  className={classNames(projectcss.all, sty.semantuIcon)}
                />

                <div
                  data-plasmic-name={"sectionTitle10"}
                  data-plasmic-override={overrides.sectionTitle10}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.sectionTitle10
                  )}
                >
                  {"Semantu"}
                </div>
              </p.Stack>

              <div
                data-plasmic-name={"sectionDescription19"}
                data-plasmic-override={overrides.sectionDescription19}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.sectionDescription19
                )}
              >
                <React.Fragment>
                  <React.Fragment>
                    {
                      "LINCD was built by Semantu as a way to increase interoperability on the internet.\nSemantu is creating a no-code Web 3.0 app builder based on LINCD.\n\nFor demo's on what could be done with LINCD.\n"
                    }
                  </React.Fragment>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.link__w7Gyv
                    )}
                    href={"https://www.semantu.com/demos" as const}
                  >
                    {"www.semantu.com/demos"}
                  </a>
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__rpkXx)}>
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__ukl5S
                  )}
                  href={"https://discord.gg/2PFnf7udET" as const}
                  target={"_blank" as const}
                  title={"Join us on Discord!" as const}
                >
                  <p.PlasmicImg
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={"Discord Icon" as const}
                    className={classNames(sty.img)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: discordLogoFDt5FOWtj,
                      fullWidth: 463,
                      fullHeight: 512,
                      aspectRatio: undefined
                    }}
                  />
                </a>
              </div>
            </p.Stack>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  lincdLandingPage: [
    "lincdLandingPage",
    "home",
    "hero",
    "frame140",
    "frame96",
    "heading",
    "title",
    "description2",
    "frame179",
    "lincd",
    "frame137",
    "lincdCodeExample",
    "sectionTitle3",
    "span",
    "theLibrary",
    "frame126",
    "frame169",
    "sectionTitle2",
    "rectangle79",
    "sectionDescription2",
    "frame170",
    "sectionDescription5",
    "sectionDescription6",
    "frame171",
    "sectionDescription3",
    "sectionDescription4",
    "frame172",
    "sectionDescription7",
    "sectionDescription8",
    "frame173",
    "sectionDescription9",
    "sectionDescription10",
    "frame174",
    "sectionDescription11",
    "sectionDescription12",
    "frame175",
    "sectionDescription13",
    "sectionDescription14",
    "frame151",
    "frame153",
    "rectangle78",
    "frame149",
    "frame147",
    "tag",
    "largeTagBase",
    "tag2",
    "largeTagBase2",
    "tag3",
    "largeTagBase3",
    "frame152",
    "rectangle80",
    "frame154",
    "frame148",
    "tag4",
    "largeTagBase4",
    "tag5",
    "largeTagBase5",
    "tag6",
    "largeTagBase6",
    "frame155",
    "rectangle81",
    "publish",
    "frame156",
    "tag7",
    "largeTagBase7",
    "tag8",
    "largeTagBase8",
    "tag9",
    "largeTagBase9",
    "frame157",
    "rectangle82",
    "infographic",
    "collaboration",
    "frame97",
    "sectionTitle4",
    "sectionDescription15",
    "learnWeb4",
    "image52",
    "learnWeb30",
    "sectionTitle5",
    "sectionDescription16",
    "learnWeb5",
    "image22",
    "featureInfo",
    "sectionTitle6",
    "sectionDescription17",
    "learnWeb6",
    "image53",
    "frame131",
    "sectionTitle7",
    "sectionDescription18",
    "footer",
    "frame145",
    "sectionTitle8",
    "semantuIcon",
    "sectionTitle10",
    "sectionDescription19",
    "img"
  ],
  home: [
    "home",
    "hero",
    "frame140",
    "frame96",
    "heading",
    "title",
    "description2",
    "frame179",
    "lincd",
    "frame137",
    "lincdCodeExample",
    "sectionTitle3",
    "span",
    "theLibrary",
    "frame126",
    "frame169",
    "sectionTitle2",
    "rectangle79",
    "sectionDescription2",
    "frame170",
    "sectionDescription5",
    "sectionDescription6",
    "frame171",
    "sectionDescription3",
    "sectionDescription4",
    "frame172",
    "sectionDescription7",
    "sectionDescription8",
    "frame173",
    "sectionDescription9",
    "sectionDescription10",
    "frame174",
    "sectionDescription11",
    "sectionDescription12",
    "frame175",
    "sectionDescription13",
    "sectionDescription14",
    "frame151",
    "frame153",
    "rectangle78",
    "frame149",
    "frame147",
    "tag",
    "largeTagBase",
    "tag2",
    "largeTagBase2",
    "tag3",
    "largeTagBase3",
    "frame152",
    "rectangle80",
    "frame154",
    "frame148",
    "tag4",
    "largeTagBase4",
    "tag5",
    "largeTagBase5",
    "tag6",
    "largeTagBase6",
    "frame155",
    "rectangle81",
    "publish",
    "frame156",
    "tag7",
    "largeTagBase7",
    "tag8",
    "largeTagBase8",
    "tag9",
    "largeTagBase9",
    "frame157",
    "rectangle82",
    "infographic",
    "collaboration",
    "frame97",
    "sectionTitle4",
    "sectionDescription15",
    "learnWeb4",
    "image52",
    "learnWeb30",
    "sectionTitle5",
    "sectionDescription16",
    "learnWeb5",
    "image22",
    "featureInfo",
    "sectionTitle6",
    "sectionDescription17",
    "learnWeb6",
    "image53",
    "frame131",
    "sectionTitle7",
    "sectionDescription18",
    "footer",
    "frame145",
    "sectionTitle8",
    "semantuIcon",
    "sectionTitle10",
    "sectionDescription19",
    "img"
  ],
  hero: [
    "hero",
    "frame140",
    "frame96",
    "heading",
    "title",
    "description2",
    "frame179"
  ],
  frame140: ["frame140"],
  frame96: ["frame96", "heading", "title", "description2", "frame179"],
  heading: ["heading", "title", "description2"],
  title: ["title"],
  description2: ["description2"],
  frame179: ["frame179"],
  lincd: ["lincd", "frame137", "lincdCodeExample", "sectionTitle3", "span"],
  frame137: ["frame137", "lincdCodeExample", "sectionTitle3", "span"],
  lincdCodeExample: ["lincdCodeExample"],
  sectionTitle3: ["sectionTitle3", "span"],
  span: ["span"],
  theLibrary: [
    "theLibrary",
    "frame126",
    "frame169",
    "sectionTitle2",
    "rectangle79",
    "sectionDescription2",
    "frame170",
    "sectionDescription5",
    "sectionDescription6",
    "frame171",
    "sectionDescription3",
    "sectionDescription4",
    "frame172",
    "sectionDescription7",
    "sectionDescription8",
    "frame173",
    "sectionDescription9",
    "sectionDescription10",
    "frame174",
    "sectionDescription11",
    "sectionDescription12",
    "frame175",
    "sectionDescription13",
    "sectionDescription14",
    "frame151",
    "frame153",
    "rectangle78",
    "frame149",
    "frame147",
    "tag",
    "largeTagBase",
    "tag2",
    "largeTagBase2",
    "tag3",
    "largeTagBase3",
    "frame152",
    "rectangle80",
    "frame154",
    "frame148",
    "tag4",
    "largeTagBase4",
    "tag5",
    "largeTagBase5",
    "tag6",
    "largeTagBase6",
    "frame155",
    "rectangle81",
    "publish",
    "frame156",
    "tag7",
    "largeTagBase7",
    "tag8",
    "largeTagBase8",
    "tag9",
    "largeTagBase9",
    "frame157",
    "rectangle82",
    "infographic"
  ],
  frame126: [
    "frame126",
    "frame169",
    "sectionTitle2",
    "rectangle79",
    "sectionDescription2",
    "frame170",
    "sectionDescription5",
    "sectionDescription6",
    "frame171",
    "sectionDescription3",
    "sectionDescription4",
    "frame172",
    "sectionDescription7",
    "sectionDescription8",
    "frame173",
    "sectionDescription9",
    "sectionDescription10",
    "frame174",
    "sectionDescription11",
    "sectionDescription12",
    "frame175",
    "sectionDescription13",
    "sectionDescription14",
    "frame151",
    "frame153",
    "rectangle78",
    "frame149",
    "frame147",
    "tag",
    "largeTagBase",
    "tag2",
    "largeTagBase2",
    "tag3",
    "largeTagBase3",
    "frame152",
    "rectangle80",
    "frame154",
    "frame148",
    "tag4",
    "largeTagBase4",
    "tag5",
    "largeTagBase5",
    "tag6",
    "largeTagBase6",
    "frame155",
    "rectangle81",
    "publish",
    "frame156",
    "tag7",
    "largeTagBase7",
    "tag8",
    "largeTagBase8",
    "tag9",
    "largeTagBase9",
    "frame157",
    "rectangle82",
    "infographic"
  ],
  frame169: ["frame169", "sectionTitle2", "rectangle79"],
  sectionTitle2: ["sectionTitle2"],
  rectangle79: ["rectangle79"],
  sectionDescription2: ["sectionDescription2"],
  frame170: ["frame170", "sectionDescription5", "sectionDescription6"],
  sectionDescription5: ["sectionDescription5"],
  sectionDescription6: ["sectionDescription6"],
  frame171: ["frame171", "sectionDescription3", "sectionDescription4"],
  sectionDescription3: ["sectionDescription3"],
  sectionDescription4: ["sectionDescription4"],
  frame172: ["frame172", "sectionDescription7", "sectionDescription8"],
  sectionDescription7: ["sectionDescription7"],
  sectionDescription8: ["sectionDescription8"],
  frame173: ["frame173", "sectionDescription9", "sectionDescription10"],
  sectionDescription9: ["sectionDescription9"],
  sectionDescription10: ["sectionDescription10"],
  frame174: ["frame174", "sectionDescription11", "sectionDescription12"],
  sectionDescription11: ["sectionDescription11"],
  sectionDescription12: ["sectionDescription12"],
  frame175: ["frame175", "sectionDescription13", "sectionDescription14"],
  sectionDescription13: ["sectionDescription13"],
  sectionDescription14: ["sectionDescription14"],
  frame151: [
    "frame151",
    "frame153",
    "rectangle78",
    "frame149",
    "frame147",
    "tag",
    "largeTagBase",
    "tag2",
    "largeTagBase2",
    "tag3",
    "largeTagBase3",
    "frame152",
    "rectangle80",
    "frame154",
    "frame148",
    "tag4",
    "largeTagBase4",
    "tag5",
    "largeTagBase5",
    "tag6",
    "largeTagBase6",
    "frame155",
    "rectangle81",
    "publish",
    "frame156",
    "tag7",
    "largeTagBase7",
    "tag8",
    "largeTagBase8",
    "tag9",
    "largeTagBase9",
    "frame157",
    "rectangle82"
  ],
  frame153: ["frame153", "rectangle78"],
  rectangle78: ["rectangle78"],
  frame149: [
    "frame149",
    "frame147",
    "tag",
    "largeTagBase",
    "tag2",
    "largeTagBase2",
    "tag3",
    "largeTagBase3"
  ],
  frame147: [
    "frame147",
    "tag",
    "largeTagBase",
    "tag2",
    "largeTagBase2",
    "tag3",
    "largeTagBase3"
  ],
  tag: ["tag", "largeTagBase"],
  largeTagBase: ["largeTagBase"],
  tag2: ["tag2", "largeTagBase2"],
  largeTagBase2: ["largeTagBase2"],
  tag3: ["tag3", "largeTagBase3"],
  largeTagBase3: ["largeTagBase3"],
  frame152: ["frame152", "rectangle80"],
  rectangle80: ["rectangle80"],
  frame154: [
    "frame154",
    "frame148",
    "tag4",
    "largeTagBase4",
    "tag5",
    "largeTagBase5",
    "tag6",
    "largeTagBase6"
  ],
  frame148: [
    "frame148",
    "tag4",
    "largeTagBase4",
    "tag5",
    "largeTagBase5",
    "tag6",
    "largeTagBase6"
  ],
  tag4: ["tag4", "largeTagBase4"],
  largeTagBase4: ["largeTagBase4"],
  tag5: ["tag5", "largeTagBase5"],
  largeTagBase5: ["largeTagBase5"],
  tag6: ["tag6", "largeTagBase6"],
  largeTagBase6: ["largeTagBase6"],
  frame155: ["frame155", "rectangle81"],
  rectangle81: ["rectangle81"],
  publish: [
    "publish",
    "frame156",
    "tag7",
    "largeTagBase7",
    "tag8",
    "largeTagBase8",
    "tag9",
    "largeTagBase9"
  ],
  frame156: [
    "frame156",
    "tag7",
    "largeTagBase7",
    "tag8",
    "largeTagBase8",
    "tag9",
    "largeTagBase9"
  ],
  tag7: ["tag7", "largeTagBase7"],
  largeTagBase7: ["largeTagBase7"],
  tag8: ["tag8", "largeTagBase8"],
  largeTagBase8: ["largeTagBase8"],
  tag9: ["tag9", "largeTagBase9"],
  largeTagBase9: ["largeTagBase9"],
  frame157: ["frame157", "rectangle82"],
  rectangle82: ["rectangle82"],
  infographic: ["infographic"],
  collaboration: [
    "collaboration",
    "frame97",
    "sectionTitle4",
    "sectionDescription15"
  ],
  frame97: ["frame97", "sectionTitle4", "sectionDescription15"],
  sectionTitle4: ["sectionTitle4"],
  sectionDescription15: ["sectionDescription15"],
  learnWeb4: [
    "learnWeb4",
    "image52",
    "learnWeb30",
    "sectionTitle5",
    "sectionDescription16"
  ],
  image52: ["image52"],
  learnWeb30: ["learnWeb30", "sectionTitle5", "sectionDescription16"],
  sectionTitle5: ["sectionTitle5"],
  sectionDescription16: ["sectionDescription16"],
  learnWeb5: [
    "learnWeb5",
    "image22",
    "featureInfo",
    "sectionTitle6",
    "sectionDescription17"
  ],
  image22: ["image22"],
  featureInfo: ["featureInfo", "sectionTitle6", "sectionDescription17"],
  sectionTitle6: ["sectionTitle6"],
  sectionDescription17: ["sectionDescription17"],
  learnWeb6: [
    "learnWeb6",
    "image53",
    "frame131",
    "sectionTitle7",
    "sectionDescription18"
  ],
  image53: ["image53"],
  frame131: ["frame131", "sectionTitle7", "sectionDescription18"],
  sectionTitle7: ["sectionTitle7"],
  sectionDescription18: ["sectionDescription18"],
  footer: [
    "footer",
    "frame145",
    "sectionTitle8",
    "semantuIcon",
    "sectionTitle10",
    "sectionDescription19",
    "img"
  ],
  frame145: ["frame145", "sectionTitle8", "semantuIcon", "sectionTitle10"],
  sectionTitle8: ["sectionTitle8"],
  semantuIcon: ["semantuIcon"],
  sectionTitle10: ["sectionTitle10"],
  sectionDescription19: ["sectionDescription19"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  lincdLandingPage: "div";
  home: "div";
  hero: "div";
  frame140: "div";
  frame96: "div";
  heading: "div";
  title: "div";
  description2: "div";
  frame179: "div";
  lincd: "div";
  frame137: "div";
  lincdCodeExample: "div";
  sectionTitle3: "div";
  span: "span";
  theLibrary: "div";
  frame126: "div";
  frame169: "div";
  sectionTitle2: "div";
  rectangle79: "div";
  sectionDescription2: "div";
  frame170: "div";
  sectionDescription5: "div";
  sectionDescription6: "div";
  frame171: "div";
  sectionDescription3: "div";
  sectionDescription4: "div";
  frame172: "div";
  sectionDescription7: "div";
  sectionDescription8: "div";
  frame173: "div";
  sectionDescription9: "div";
  sectionDescription10: "div";
  frame174: "div";
  sectionDescription11: "div";
  sectionDescription12: "div";
  frame175: "div";
  sectionDescription13: "div";
  sectionDescription14: "div";
  frame151: "div";
  frame153: "div";
  rectangle78: "div";
  frame149: "div";
  frame147: "div";
  tag: "div";
  largeTagBase: "div";
  tag2: "div";
  largeTagBase2: "div";
  tag3: "div";
  largeTagBase3: "div";
  frame152: "div";
  rectangle80: "div";
  frame154: "div";
  frame148: "div";
  tag4: "div";
  largeTagBase4: "div";
  tag5: "div";
  largeTagBase5: "div";
  tag6: "div";
  largeTagBase6: "div";
  frame155: "div";
  rectangle81: "div";
  publish: "div";
  frame156: "div";
  tag7: "div";
  largeTagBase7: "div";
  tag8: "div";
  largeTagBase8: "div";
  tag9: "div";
  largeTagBase9: "div";
  frame157: "div";
  rectangle82: "div";
  infographic: "div";
  collaboration: "div";
  frame97: "div";
  sectionTitle4: "div";
  sectionDescription15: "div";
  learnWeb4: "div";
  image52: "div";
  learnWeb30: "div";
  sectionTitle5: "h2";
  sectionDescription16: "div";
  learnWeb5: "div";
  image22: "div";
  featureInfo: "div";
  sectionTitle6: "h2";
  sectionDescription17: "div";
  learnWeb6: "div";
  image53: "div";
  frame131: "div";
  sectionTitle7: "div";
  sectionDescription18: "div";
  footer: "div";
  frame145: "div";
  sectionTitle8: "div";
  semantuIcon: "div";
  sectionTitle10: "div";
  sectionDescription19: "div";
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "lincdLandingPage") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("lincdLandingPage"),
  {
    // Helper components rendering sub-elements
    home: makeNodeComponent("home"),
    hero: makeNodeComponent("hero"),
    frame140: makeNodeComponent("frame140"),
    frame96: makeNodeComponent("frame96"),
    heading: makeNodeComponent("heading"),
    title: makeNodeComponent("title"),
    description2: makeNodeComponent("description2"),
    frame179: makeNodeComponent("frame179"),
    lincd: makeNodeComponent("lincd"),
    frame137: makeNodeComponent("frame137"),
    lincdCodeExample: makeNodeComponent("lincdCodeExample"),
    sectionTitle3: makeNodeComponent("sectionTitle3"),
    span: makeNodeComponent("span"),
    theLibrary: makeNodeComponent("theLibrary"),
    frame126: makeNodeComponent("frame126"),
    frame169: makeNodeComponent("frame169"),
    sectionTitle2: makeNodeComponent("sectionTitle2"),
    rectangle79: makeNodeComponent("rectangle79"),
    sectionDescription2: makeNodeComponent("sectionDescription2"),
    frame170: makeNodeComponent("frame170"),
    sectionDescription5: makeNodeComponent("sectionDescription5"),
    sectionDescription6: makeNodeComponent("sectionDescription6"),
    frame171: makeNodeComponent("frame171"),
    sectionDescription3: makeNodeComponent("sectionDescription3"),
    sectionDescription4: makeNodeComponent("sectionDescription4"),
    frame172: makeNodeComponent("frame172"),
    sectionDescription7: makeNodeComponent("sectionDescription7"),
    sectionDescription8: makeNodeComponent("sectionDescription8"),
    frame173: makeNodeComponent("frame173"),
    sectionDescription9: makeNodeComponent("sectionDescription9"),
    sectionDescription10: makeNodeComponent("sectionDescription10"),
    frame174: makeNodeComponent("frame174"),
    sectionDescription11: makeNodeComponent("sectionDescription11"),
    sectionDescription12: makeNodeComponent("sectionDescription12"),
    frame175: makeNodeComponent("frame175"),
    sectionDescription13: makeNodeComponent("sectionDescription13"),
    sectionDescription14: makeNodeComponent("sectionDescription14"),
    frame151: makeNodeComponent("frame151"),
    frame153: makeNodeComponent("frame153"),
    rectangle78: makeNodeComponent("rectangle78"),
    frame149: makeNodeComponent("frame149"),
    frame147: makeNodeComponent("frame147"),
    tag: makeNodeComponent("tag"),
    largeTagBase: makeNodeComponent("largeTagBase"),
    tag2: makeNodeComponent("tag2"),
    largeTagBase2: makeNodeComponent("largeTagBase2"),
    tag3: makeNodeComponent("tag3"),
    largeTagBase3: makeNodeComponent("largeTagBase3"),
    frame152: makeNodeComponent("frame152"),
    rectangle80: makeNodeComponent("rectangle80"),
    frame154: makeNodeComponent("frame154"),
    frame148: makeNodeComponent("frame148"),
    tag4: makeNodeComponent("tag4"),
    largeTagBase4: makeNodeComponent("largeTagBase4"),
    tag5: makeNodeComponent("tag5"),
    largeTagBase5: makeNodeComponent("largeTagBase5"),
    tag6: makeNodeComponent("tag6"),
    largeTagBase6: makeNodeComponent("largeTagBase6"),
    frame155: makeNodeComponent("frame155"),
    rectangle81: makeNodeComponent("rectangle81"),
    publish: makeNodeComponent("publish"),
    frame156: makeNodeComponent("frame156"),
    tag7: makeNodeComponent("tag7"),
    largeTagBase7: makeNodeComponent("largeTagBase7"),
    tag8: makeNodeComponent("tag8"),
    largeTagBase8: makeNodeComponent("largeTagBase8"),
    tag9: makeNodeComponent("tag9"),
    largeTagBase9: makeNodeComponent("largeTagBase9"),
    frame157: makeNodeComponent("frame157"),
    rectangle82: makeNodeComponent("rectangle82"),
    infographic: makeNodeComponent("infographic"),
    collaboration: makeNodeComponent("collaboration"),
    frame97: makeNodeComponent("frame97"),
    sectionTitle4: makeNodeComponent("sectionTitle4"),
    sectionDescription15: makeNodeComponent("sectionDescription15"),
    learnWeb4: makeNodeComponent("learnWeb4"),
    image52: makeNodeComponent("image52"),
    learnWeb30: makeNodeComponent("learnWeb30"),
    sectionTitle5: makeNodeComponent("sectionTitle5"),
    sectionDescription16: makeNodeComponent("sectionDescription16"),
    learnWeb5: makeNodeComponent("learnWeb5"),
    image22: makeNodeComponent("image22"),
    featureInfo: makeNodeComponent("featureInfo"),
    sectionTitle6: makeNodeComponent("sectionTitle6"),
    sectionDescription17: makeNodeComponent("sectionDescription17"),
    learnWeb6: makeNodeComponent("learnWeb6"),
    image53: makeNodeComponent("image53"),
    frame131: makeNodeComponent("frame131"),
    sectionTitle7: makeNodeComponent("sectionTitle7"),
    sectionDescription18: makeNodeComponent("sectionDescription18"),
    footer: makeNodeComponent("footer"),
    frame145: makeNodeComponent("frame145"),
    sectionTitle8: makeNodeComponent("sectionTitle8"),
    semantuIcon: makeNodeComponent("semantuIcon"),
    sectionTitle10: makeNodeComponent("sectionTitle10"),
    sectionDescription19: makeNodeComponent("sectionDescription19"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
